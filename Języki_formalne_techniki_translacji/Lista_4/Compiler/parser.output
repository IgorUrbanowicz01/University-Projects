Terminals unused in grammar

    SCAN_ERR
    TOKEN_EOF


Grammar

    0 $accept: program $end

    1 program: procedures_decl main

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident LPR param_comma_list RPR IS X_BEGIN stmt END
    4                | ε

    5 param_comma_list: ident
    6                 | ident param_comma_list

    7 decl: decl COMMA ident
    8     | ident

    9 main: PROGRAM IS VAR decl X_BEGIN maybe_stmts END
   10     | PROGRAM IS X_BEGIN maybe_stmts END

   11 stmt: expr
   12     | if_stmt
   13     | read_stmt
   14     | write_stmt
   15     | while_stmt
   16     | repeat_stmt

   17 if_stmt: IF expr THEN stmt ELSE stmt ENDIF
   18        | IF expr THEN stmt ENDIF

   19 read_stmt: READ expr SEMICOLON

   20 write_stmt: WRITE expr SEMICOLON

   21 while_stmt: WHILE expr DO maybe_stmts ENDWHILE

   22 repeat_stmt: REPEAT maybe_stmts UNTIL expr SEMICOLON

   23 maybe_stmts: ε
   24            | stmt maybe_stmts

   25 expr: expr6

   26 expr6: expr5 ASSIGN expr6 SEMICOLON
   27      | expr5

   28 expr5: expr5 LT expr4
   29      | expr5 LEQ expr4
   30      | expr5 GT expr4
   31      | expr5 GEQ expr4
   32      | expr5 EQ expr4
   33      | expr5 NEQ expr4
   34      | expr4

   35 expr4: expr4 ADD expr3
   36      | expr4 SUB expr3
   37      | expr3

   38 expr3: expr3 MUL expr1
   39      | expr3 DIV expr1
   40      | expr3 MOD expr1
   41      | expr1

   42 expr1: func_call
   43      | atom

   44 atom: ident
   45     | INT_LIT

   46 ident: IDENT

   47 func_call: expr1 LPR expr_commdecla_list RPR

   48 expr_commdecla_list: expr
   49                    | expr COMMA expr_commdecla_list


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    PROCEDURE (258) 2 3
    IS (259) 2 3 9 10
    VAR (260) 2 9
    X_BEGIN (261) 2 3 9 10
    END (262) 2 3 9 10
    PROGRAM (263) 9 10
    IF (264) 17 18
    THEN (265) 17 18
    ELSE (266) 17
    ENDIF (267) 17 18
    WHILE (268) 21
    DO (269) 21
    ENDWHILE (270) 21
    REPEAT (271) 22
    UNTIL (272) 22
    READ (273) 19
    WRITE (274) 20
    LPR (275) 2 3 47
    RPR (276) 2 3 47
    ASSIGN (277) 26
    COMMA (278) 7 49
    SEMICOLON (279) 19 20 22 26
    EQ (280) 32
    NEQ (281) 33
    GT (282) 30
    LT (283) 28
    LEQ (284) 29
    GEQ (285) 31
    ADD (286) 35
    SUB (287) 36
    MUL (288) 38
    DIV (289) 39
    MOD (290) 40
    IDENT (291) 46
    INT_LIT (292) 45
    SCAN_ERR (293)
    TOKEN_EOF (294)


Nonterminals, with rules where they appear

    $accept (40)
        on left: 0
    program <decl> (41)
        on left: 1
        on right: 0
    procedures_decl <decl> (42)
        on left: 2 3 4
        on right: 1 2 3
    param_comma_list <decl> (43)
        on left: 5 6
        on right: 2 3 6
    decl <decl> (44)
        on left: 7 8
        on right: 2 7 9
    main <decl> (45)
        on left: 9 10
        on right: 1
    stmt <stmt> (46)
        on left: 11 12 13 14 15 16
        on right: 3 17 18 24
    if_stmt <stmt> (47)
        on left: 17 18
        on right: 12
    read_stmt <expr> (48)
        on left: 19
        on right: 13
    write_stmt <stmt> (49)
        on left: 20
        on right: 14
    while_stmt <stmt> (50)
        on left: 21
        on right: 15
    repeat_stmt <stmt> (51)
        on left: 22
        on right: 16
    maybe_stmts <stmt> (52)
        on left: 23 24
        on right: 2 9 10 21 22 24
    expr <expr> (53)
        on left: 25
        on right: 11 17 18 19 20 21 22 48 49
    expr6 <expr> (54)
        on left: 26 27
        on right: 25 26
    expr5 <expr> (55)
        on left: 28 29 30 31 32 33 34
        on right: 26 27 28 29 30 31 32 33
    expr4 <expr> (56)
        on left: 35 36 37
        on right: 28 29 30 31 32 33 34 35 36
    expr3 <expr> (57)
        on left: 38 39 40 41
        on right: 35 36 37 38 39 40
    expr1 <expr> (58)
        on left: 42 43
        on right: 38 39 40 41 47
    atom <expr> (59)
        on left: 44 45
        on right: 43
    ident <ident> (60)
        on left: 46
        on right: 2 3 5 6 7 8 44
    func_call <expr> (61)
        on left: 47
        on right: 42
    expr_commdecla_list <expr> (62)
        on left: 48 49
        on right: 47 49


State 0

    0 $accept: • program $end

    $default  reduce using rule 4 (procedures_decl)

    program          go to state 1
    procedures_decl  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: procedures_decl • main
    2 procedures_decl: procedures_decl • PROCEDURE ident LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl • PROCEDURE ident LPR param_comma_list RPR IS X_BEGIN stmt END

    PROCEDURE  shift, and go to state 4
    PROGRAM    shift, and go to state 5

    main  go to state 6


State 3

    0 $accept: program $end •

    $default  accept


State 4

    2 procedures_decl: procedures_decl PROCEDURE • ident LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE • ident LPR param_comma_list RPR IS X_BEGIN stmt END

    IDENT  shift, and go to state 7

    ident  go to state 8


State 5

    9 main: PROGRAM • IS VAR decl X_BEGIN maybe_stmts END
   10     | PROGRAM • IS X_BEGIN maybe_stmts END

    IS  shift, and go to state 9


State 6

    1 program: procedures_decl main •

    $default  reduce using rule 1 (program)


State 7

   46 ident: IDENT •

    $default  reduce using rule 46 (ident)


State 8

    2 procedures_decl: procedures_decl PROCEDURE ident • LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident • LPR param_comma_list RPR IS X_BEGIN stmt END

    LPR  shift, and go to state 10


State 9

    9 main: PROGRAM IS • VAR decl X_BEGIN maybe_stmts END
   10     | PROGRAM IS • X_BEGIN maybe_stmts END

    VAR      shift, and go to state 11
    X_BEGIN  shift, and go to state 12


State 10

    2 procedures_decl: procedures_decl PROCEDURE ident LPR • param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident LPR • param_comma_list RPR IS X_BEGIN stmt END

    IDENT  shift, and go to state 7

    param_comma_list  go to state 13
    ident             go to state 14


State 11

    9 main: PROGRAM IS VAR • decl X_BEGIN maybe_stmts END

    IDENT  shift, and go to state 7

    decl   go to state 15
    ident  go to state 16


State 12

   10 main: PROGRAM IS X_BEGIN • maybe_stmts END

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 29
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 13

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list • RPR IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident LPR param_comma_list • RPR IS X_BEGIN stmt END

    RPR  shift, and go to state 39


State 14

    5 param_comma_list: ident •
    6                 | ident • param_comma_list

    IDENT  shift, and go to state 7

    $default  reduce using rule 5 (param_comma_list)

    param_comma_list  go to state 40
    ident             go to state 14


State 15

    7 decl: decl • COMMA ident
    9 main: PROGRAM IS VAR decl • X_BEGIN maybe_stmts END

    X_BEGIN  shift, and go to state 41
    COMMA    shift, and go to state 42


State 16

    8 decl: ident •

    $default  reduce using rule 8 (decl)


State 17

   17 if_stmt: IF • expr THEN stmt ELSE stmt ENDIF
   18        | IF • expr THEN stmt ENDIF

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr       go to state 43
    expr6      go to state 31
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 18

   21 while_stmt: WHILE • expr DO maybe_stmts ENDWHILE

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr       go to state 44
    expr6      go to state 31
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 19

   22 repeat_stmt: REPEAT • maybe_stmts UNTIL expr SEMICOLON

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 45
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 20

   19 read_stmt: READ • expr SEMICOLON

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr       go to state 46
    expr6      go to state 31
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 21

   20 write_stmt: WRITE • expr SEMICOLON

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr       go to state 47
    expr6      go to state 31
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 22

   45 atom: INT_LIT •

    $default  reduce using rule 45 (atom)


State 23

   24 maybe_stmts: stmt • maybe_stmts

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 48
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 24

   12 stmt: if_stmt •

    $default  reduce using rule 12 (stmt)


State 25

   13 stmt: read_stmt •

    $default  reduce using rule 13 (stmt)


State 26

   14 stmt: write_stmt •

    $default  reduce using rule 14 (stmt)


State 27

   15 stmt: while_stmt •

    $default  reduce using rule 15 (stmt)


State 28

   16 stmt: repeat_stmt •

    $default  reduce using rule 16 (stmt)


State 29

   10 main: PROGRAM IS X_BEGIN maybe_stmts • END

    END  shift, and go to state 49


State 30

   11 stmt: expr •

    $default  reduce using rule 11 (stmt)


State 31

   25 expr: expr6 •

    $default  reduce using rule 25 (expr)


State 32

   26 expr6: expr5 • ASSIGN expr6 SEMICOLON
   27      | expr5 •
   28 expr5: expr5 • LT expr4
   29      | expr5 • LEQ expr4
   30      | expr5 • GT expr4
   31      | expr5 • GEQ expr4
   32      | expr5 • EQ expr4
   33      | expr5 • NEQ expr4

    ASSIGN  shift, and go to state 50
    EQ      shift, and go to state 51
    NEQ     shift, and go to state 52
    GT      shift, and go to state 53
    LT      shift, and go to state 54
    LEQ     shift, and go to state 55
    GEQ     shift, and go to state 56

    $default  reduce using rule 27 (expr6)


State 33

   34 expr5: expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 34 (expr5)


State 34

   37 expr4: expr3 •
   38 expr3: expr3 • MUL expr1
   39      | expr3 • DIV expr1
   40      | expr3 • MOD expr1

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 37 (expr4)


State 35

   41 expr3: expr1 •
   47 func_call: expr1 • LPR expr_commdecla_list RPR

    LPR  shift, and go to state 62

    $default  reduce using rule 41 (expr3)


State 36

   43 expr1: atom •

    $default  reduce using rule 43 (expr1)


State 37

   44 atom: ident •

    $default  reduce using rule 44 (atom)


State 38

   42 expr1: func_call •

    $default  reduce using rule 42 (expr1)


State 39

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR • IS VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident LPR param_comma_list RPR • IS X_BEGIN stmt END

    IS  shift, and go to state 63


State 40

    6 param_comma_list: ident param_comma_list •

    $default  reduce using rule 6 (param_comma_list)


State 41

    9 main: PROGRAM IS VAR decl X_BEGIN • maybe_stmts END

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 64
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 42

    7 decl: decl COMMA • ident

    IDENT  shift, and go to state 7

    ident  go to state 65


State 43

   17 if_stmt: IF expr • THEN stmt ELSE stmt ENDIF
   18        | IF expr • THEN stmt ENDIF

    THEN  shift, and go to state 66


State 44

   21 while_stmt: WHILE expr • DO maybe_stmts ENDWHILE

    DO  shift, and go to state 67


State 45

   22 repeat_stmt: REPEAT maybe_stmts • UNTIL expr SEMICOLON

    UNTIL  shift, and go to state 68


State 46

   19 read_stmt: READ expr • SEMICOLON

    SEMICOLON  shift, and go to state 69


State 47

   20 write_stmt: WRITE expr • SEMICOLON

    SEMICOLON  shift, and go to state 70


State 48

   24 maybe_stmts: stmt maybe_stmts •

    $default  reduce using rule 24 (maybe_stmts)


State 49

   10 main: PROGRAM IS X_BEGIN maybe_stmts END •

    $default  reduce using rule 10 (main)


State 50

   26 expr6: expr5 ASSIGN • expr6 SEMICOLON

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr6      go to state 71
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 51

   32 expr5: expr5 EQ • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 72
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 52

   33 expr5: expr5 NEQ • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 73
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 53

   30 expr5: expr5 GT • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 74
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 54

   28 expr5: expr5 LT • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 75
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 55

   29 expr5: expr5 LEQ • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 76
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 56

   31 expr5: expr5 GEQ • expr4

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr4      go to state 77
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 57

   35 expr4: expr4 ADD • expr3

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr3      go to state 78
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 58

   36 expr4: expr4 SUB • expr3

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr3      go to state 79
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 59

   38 expr3: expr3 MUL • expr1

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr1      go to state 80
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 60

   39 expr3: expr3 DIV • expr1

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr1      go to state 81
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 61

   40 expr3: expr3 MOD • expr1

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr1      go to state 82
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 62

   47 func_call: expr1 LPR • expr_commdecla_list RPR

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr                 go to state 83
    expr6                go to state 31
    expr5                go to state 32
    expr4                go to state 33
    expr3                go to state 34
    expr1                go to state 35
    atom                 go to state 36
    ident                go to state 37
    func_call            go to state 38
    expr_commdecla_list  go to state 84


State 63

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS • VAR decl X_BEGIN maybe_stmts END
    3                | procedures_decl PROCEDURE ident LPR param_comma_list RPR IS • X_BEGIN stmt END

    VAR      shift, and go to state 85
    X_BEGIN  shift, and go to state 86


State 64

    9 main: PROGRAM IS VAR decl X_BEGIN maybe_stmts • END

    END  shift, and go to state 87


State 65

    7 decl: decl COMMA ident •

    $default  reduce using rule 7 (decl)


State 66

   17 if_stmt: IF expr THEN • stmt ELSE stmt ENDIF
   18        | IF expr THEN • stmt ENDIF

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    stmt         go to state 88
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 67

   21 while_stmt: WHILE expr DO • maybe_stmts ENDWHILE

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 89
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 68

   22 repeat_stmt: REPEAT maybe_stmts UNTIL • expr SEMICOLON

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr       go to state 90
    expr6      go to state 31
    expr5      go to state 32
    expr4      go to state 33
    expr3      go to state 34
    expr1      go to state 35
    atom       go to state 36
    ident      go to state 37
    func_call  go to state 38


State 69

   19 read_stmt: READ expr SEMICOLON •

    $default  reduce using rule 19 (read_stmt)


State 70

   20 write_stmt: WRITE expr SEMICOLON •

    $default  reduce using rule 20 (write_stmt)


State 71

   26 expr6: expr5 ASSIGN expr6 • SEMICOLON

    SEMICOLON  shift, and go to state 91


State 72

   32 expr5: expr5 EQ expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 32 (expr5)


State 73

   33 expr5: expr5 NEQ expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 33 (expr5)


State 74

   30 expr5: expr5 GT expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 30 (expr5)


State 75

   28 expr5: expr5 LT expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 28 (expr5)


State 76

   29 expr5: expr5 LEQ expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 29 (expr5)


State 77

   31 expr5: expr5 GEQ expr4 •
   35 expr4: expr4 • ADD expr3
   36      | expr4 • SUB expr3

    ADD  shift, and go to state 57
    SUB  shift, and go to state 58

    $default  reduce using rule 31 (expr5)


State 78

   35 expr4: expr4 ADD expr3 •
   38 expr3: expr3 • MUL expr1
   39      | expr3 • DIV expr1
   40      | expr3 • MOD expr1

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 35 (expr4)


State 79

   36 expr4: expr4 SUB expr3 •
   38 expr3: expr3 • MUL expr1
   39      | expr3 • DIV expr1
   40      | expr3 • MOD expr1

    MUL  shift, and go to state 59
    DIV  shift, and go to state 60
    MOD  shift, and go to state 61

    $default  reduce using rule 36 (expr4)


State 80

   38 expr3: expr3 MUL expr1 •
   47 func_call: expr1 • LPR expr_commdecla_list RPR

    LPR  shift, and go to state 62

    $default  reduce using rule 38 (expr3)


State 81

   39 expr3: expr3 DIV expr1 •
   47 func_call: expr1 • LPR expr_commdecla_list RPR

    LPR  shift, and go to state 62

    $default  reduce using rule 39 (expr3)


State 82

   40 expr3: expr3 MOD expr1 •
   47 func_call: expr1 • LPR expr_commdecla_list RPR

    LPR  shift, and go to state 62

    $default  reduce using rule 40 (expr3)


State 83

   48 expr_commdecla_list: expr •
   49                    | expr • COMMA expr_commdecla_list

    COMMA  shift, and go to state 92

    $default  reduce using rule 48 (expr_commdecla_list)


State 84

   47 func_call: expr1 LPR expr_commdecla_list • RPR

    RPR  shift, and go to state 93


State 85

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR • decl X_BEGIN maybe_stmts END

    IDENT  shift, and go to state 7

    decl   go to state 94
    ident  go to state 16


State 86

    3 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS X_BEGIN • stmt END

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    stmt         go to state 95
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 87

    9 main: PROGRAM IS VAR decl X_BEGIN maybe_stmts END •

    $default  reduce using rule 9 (main)


State 88

   17 if_stmt: IF expr THEN stmt • ELSE stmt ENDIF
   18        | IF expr THEN stmt • ENDIF

    ELSE   shift, and go to state 96
    ENDIF  shift, and go to state 97


State 89

   21 while_stmt: WHILE expr DO maybe_stmts • ENDWHILE

    ENDWHILE  shift, and go to state 98


State 90

   22 repeat_stmt: REPEAT maybe_stmts UNTIL expr • SEMICOLON

    SEMICOLON  shift, and go to state 99


State 91

   26 expr6: expr5 ASSIGN expr6 SEMICOLON •

    $default  reduce using rule 26 (expr6)


State 92

   49 expr_commdecla_list: expr COMMA • expr_commdecla_list

    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    expr                 go to state 83
    expr6                go to state 31
    expr5                go to state 32
    expr4                go to state 33
    expr3                go to state 34
    expr1                go to state 35
    atom                 go to state 36
    ident                go to state 37
    func_call            go to state 38
    expr_commdecla_list  go to state 100


State 93

   47 func_call: expr1 LPR expr_commdecla_list RPR •

    $default  reduce using rule 47 (func_call)


State 94

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR decl • X_BEGIN maybe_stmts END
    7 decl: decl • COMMA ident

    X_BEGIN  shift, and go to state 101
    COMMA    shift, and go to state 42


State 95

    3 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS X_BEGIN stmt • END

    END  shift, and go to state 102


State 96

   17 if_stmt: IF expr THEN stmt ELSE • stmt ENDIF

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    stmt         go to state 103
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 97

   18 if_stmt: IF expr THEN stmt ENDIF •

    $default  reduce using rule 18 (if_stmt)


State 98

   21 while_stmt: WHILE expr DO maybe_stmts ENDWHILE •

    $default  reduce using rule 21 (while_stmt)


State 99

   22 repeat_stmt: REPEAT maybe_stmts UNTIL expr SEMICOLON •

    $default  reduce using rule 22 (repeat_stmt)


State 100

   49 expr_commdecla_list: expr COMMA expr_commdecla_list •

    $default  reduce using rule 49 (expr_commdecla_list)


State 101

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR decl X_BEGIN • maybe_stmts END

    IF       shift, and go to state 17
    WHILE    shift, and go to state 18
    REPEAT   shift, and go to state 19
    READ     shift, and go to state 20
    WRITE    shift, and go to state 21
    IDENT    shift, and go to state 7
    INT_LIT  shift, and go to state 22

    $default  reduce using rule 23 (maybe_stmts)

    stmt         go to state 23
    if_stmt      go to state 24
    read_stmt    go to state 25
    write_stmt   go to state 26
    while_stmt   go to state 27
    repeat_stmt  go to state 28
    maybe_stmts  go to state 104
    expr         go to state 30
    expr6        go to state 31
    expr5        go to state 32
    expr4        go to state 33
    expr3        go to state 34
    expr1        go to state 35
    atom         go to state 36
    ident        go to state 37
    func_call    go to state 38


State 102

    3 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS X_BEGIN stmt END •

    $default  reduce using rule 3 (procedures_decl)


State 103

   17 if_stmt: IF expr THEN stmt ELSE stmt • ENDIF

    ENDIF  shift, and go to state 105


State 104

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts • END

    END  shift, and go to state 106


State 105

   17 if_stmt: IF expr THEN stmt ELSE stmt ENDIF •

    $default  reduce using rule 17 (if_stmt)


State 106

    2 procedures_decl: procedures_decl PROCEDURE ident LPR param_comma_list RPR IS VAR decl X_BEGIN maybe_stmts END •

    $default  reduce using rule 2 (procedures_decl)
