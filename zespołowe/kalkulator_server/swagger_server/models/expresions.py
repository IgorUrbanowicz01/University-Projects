# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Expresions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, num: int=None, exp: str=None, acc: int=None):  # noqa: E501
        """Expresions - a model defined in Swagger

        :param n
        um: The num of this Expresions.  # noqa: E501
        :type num: int
        :param exp: The exp of this Expresions.  # noqa: E501
        :type exp: str
        :param acc: The acc of this Expresions.  # noqa: E501
        :type acc: int
        """
        self.swagger_types = {
            'num': int,
            'exp': str,
            'acc': int
        }

        self.attribute_map = {
            'num': 'num',
            'exp': 'exp',
            'acc': 'acc'
        }
        self._num = num
        self._exp = exp
        self._acc = acc

    @classmethod
    def from_dict(cls, dikt) -> 'Expresions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The expresions of this Expresions.  # noqa: E501
        :rtype: Expresions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num(self) -> int:
        """Gets the num of this Expresions.


        :return: The num of this Expresions.
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num: int):
        """Sets the num of this Expresions.


        :param num: The num of this Expresions.
        :type num: int
        """
        if num is None:
            raise ValueError("Invalid value for `num`, must not be `None`")  # noqa: E501

        self._num = num

    @property
    def exp(self) -> str:
        """Gets the exp of this Expresions.


        :return: The exp of this Expresions.
        :rtype: str
        """
        return self._exp

    @exp.setter
    def exp(self, exp: str):
        """Sets the exp of this Expresions.


        :param exp: The exp of this Expresions.
        :type exp: str
        """
        if exp is None:
            raise ValueError("Invalid value for `exp`, must not be `None`")  # noqa: E501

        self._exp = exp

    @property
    def acc(self) -> int:
        """Gets the acc of this Expresions.


        :return: The acc of this Expresions.
        :rtype: int
        """
        return self._acc

    @acc.setter
    def acc(self, acc: int):
        """Sets the acc of this Expresions.


        :param acc: The acc of this Expresions.
        :type acc: int
        """
        if acc is None:
            raise ValueError("Invalid value for `acc`, must not be `None`")  # noqa: E501

        self._acc = acc
